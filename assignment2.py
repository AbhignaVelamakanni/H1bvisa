# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KYzpr1x4YX4o1lNI4vLIsImo7jiBFiCN
"""

import tensorflow as tf
from tensorflow.keras.applications import ResNet50, VGG16
from tensorflow.keras.layers import Dense, Flatten, Input
from tensorflow.keras.models import Model
from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score
from tensorflow.keras.utils import to_categorical

"""Load CIFAR-10 dataset"""

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

"""Normalize pixel values to between 0 and 1"""

x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

"""One-hot encode the labels"""

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

"""Choose between ResNet50 or VGG16"""

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

"""Freeze the convolutional base"""

for layer in base_model.layers:
    layer.trainable = False

"""Add custom dense layers"""

x = base_model.output
x = Flatten()(x)
x = Dense(512, activation='relu')(x)
predictions = Dense(10, activation='softmax')(x)

"""Create the final model"""

model = Model(inputs=base_model.input, outputs=predictions)

"""Compile the model"""

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""Train the model"""

history = model.fit(x_train, y_train,
                    epochs=10,
                    batch_size=64,
                    validation_data=(x_test, y_test))

import matplotlib.pyplot as plt

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()

"""Evaluate the model on the test set"""

y_pred = model.predict(x_test)
y_pred_classes = y_pred.argmax(axis=-1)
y_true = y_test.argmax(axis=-1)

"""Calculate accuracy, precision, and recall"""

accuracy = accuracy_score(y_true, y_pred_classes)
precision = precision_score(y_true, y_pred_classes, average='weighted')
recall = recall_score(y_true, y_pred_classes, average='weighted')

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")

"""Display classification report"""

print(classification_report(y_true, y_pred_classes))